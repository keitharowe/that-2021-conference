@inherits Umbraco.Web.Mvc.UmbracoViewPage<Umbraco.Web.PublishedModels.Table>
@using ContentModels = Umbraco.Web.PublishedModels;
@using Umbraco.Web;
@using Umbraco.Core.Models;
@using ClientDependency.Core.Mvc
@using Our.Umbraco.Tables.Enums
@using Our.Umbraco.Tables.Models
@{

    var margin = Model.Value<string>("margin");
    var padding = Model.Value<string>("padding");
    var customId = Model.Value<string>("customID");
    var customClass = Model.Value<string>("customClass");


}
<section id="@customId" class="tables div-section @margin @padding @customClass">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-sm-12">
                @if (!string.IsNullOrEmpty(Model.Value<string>("headline")))
                {

                    <h2>@(Model.Value<string>("headline"))</h2>

                }
                @if (Model.HasValue("description"))
                {
                    <div>@(Model.Value<IHtmlString>("description"))</div>
                }
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 col-sm-12">
                @{
                    var table = Model.Value<TableData>("tables");


                    if (table != null)
                    {
                        var firstRow = table.Cells.FirstOrDefault();
                        var rows = table.Rows.ToList();
                        var columns = table.Columns.ToList();
                        var tableStyles = table.Settings;

                        if (firstRow != null)
                        {
                            <div class="table-editor-wrapper">
                                <table class="@GetCssClass(tableStyles) table table-striped">
                                    <thead>
                                        <tr class="@GetCssClass(tableStyles, table.Rows.FirstOrDefault())">
                                            @foreach (var cell in firstRow)
                                            {
                                                if (cell != null)
                                                {
                                                    <th class="@GetCssClass(tableStyles, columns[cell.ColumnIndex])">
                                                        @(cell.Value)
                                                    </th>
                                                }
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var row in table.Cells.Skip(1))
                                        {
                                            <tr class="@GetCssClass(tableStyles, rows[row.FirstOrDefault().RowIndex])">
                                                @foreach (var cell in row)
                                                {
                                                    <td class="@GetCssClass(tableStyles, columns[cell.ColumnIndex])">
                                                        @(cell.Value)
                                                    </td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        @functions
						{
                            public string GetCssClass(StyleData tableStyles, StyleData styleData = null)
                            {
                                var styles = tableStyles.BackgroundColor != BackgroundColour.None
                                                ? tableStyles.BackgroundColor
                                                : styleData?.BackgroundColor ?? BackgroundColour.None;

                                switch (styles)
                                {
                                    case BackgroundColour.OddEven:
                                        return "is-odd-even";
                                    case BackgroundColour.OddEvenReverse:
                                        return "is-odd-even-reversed";
                                    case BackgroundColour.Primary:
                                        return "is-primary";
                                    case BackgroundColour.Secondary:
                                        return "is-secondary";
                                    case BackgroundColour.Tertiary:
                                        return "is-tertiary";
                                    default:
                                        return null;
                                }
                            }
                        }
                    }
                }
            </div>
        </div>
    </div>
</section>